services:
  # MongoDB Database
  mongo:
    image: mongo:7.0
    container_name: task_tracker_mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DB_NAME}
      # Pass credentials to init script
      MONGO_APP_USERNAME: ${MONGO_APP_USERNAME}
      MONGO_APP_PASSWORD: ${MONGO_APP_PASSWORD}
    ports:
      - "${MONGO_PORT:-27017}:27017"
    volumes:
      - mongo_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend API (Server)
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: task_tracker_backend
    restart: unless-stopped
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=5000
      - MONGODB_URI=mongodb://${MONGO_APP_USERNAME}:${MONGO_APP_PASSWORD}@mongo:27017/${MONGO_DB_NAME}?authSource=${MONGO_DB_NAME}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost,http://localhost:80,http://localhost:3000,http://localhost:8080}
      - JWT_SECRET=${JWT_SECRET}
      - BCRYPT_SALT_ROUNDS=${BCRYPT_SALT_ROUNDS:-12}
    ports:
      - "5000:5000"
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/api/tasks"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Frontend React App (Client) - Commented out, served directly by Nginx
  # frontend:
  #   build:
  #     context: ./client
  #     dockerfile: Dockerfile
  #   container_name: task_tracker_frontend
  #   restart: unless-stopped
  #   environment:
  #     - REACT_APP_API_URL=/api
  #   ports:
  #     - "8080:80"
  #   depends_on:
  #     backend:
  #       condition: service_healthy
  #   networks:
  #     - app-network
  #   healthcheck:
  #     test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 30s

  # Nginx Reverse Proxy and Frontend Server
  nginx:
    image: nginx:alpine
    container_name: task_tracker_nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./client/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./client/build:/usr/share/nginx/html:ro
    depends_on:
      - backend
    networks:
      - app-network
    command: >
      sh -c "apk --no-cache add wget && nginx -g 'daemon off;'"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

# Volumes for data persistence
volumes:
  mongo_data:
    driver: local

# Network for inter-service communication
networks:
  app-network:
    driver: bridge
